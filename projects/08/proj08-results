Script started on 2023-03-13 16:56:43-04:00 [TERM="xterm-256color" TTY="/dev/pts/0" COLUMNS="94" LINES="68"]
]0;zs35@gold02: ~/Desktop/214/projects/08[01;32mzs35@gold02[00m:[01;34m~/Desktop/214/projects/08[00m$ cat NameTester.java
import java.util.Scanner;

/* NameTester.java is a 'driver' to test class Name.
 * Begun by: Prof. Adams, for CS 214 at Calvin College.
 * Student: ZeAi Sun
 * Date: Mar 13, 2023
 ************************************************************/

public class NameTester  
{
  public static void main(String[] args)
  {
    Name aName = new Name("John", "Paul", "Jones");

    assert aName.getFirst().equals("John") ;
    assert aName.getMiddle().equals("Paul") ;
    assert aName.getLast().equals("Jones") ;

    System.out.println(aName);
    assert aName.toString().equals("John Paul Jones");

    aName.setFirst("Alice");
    aName.setMiddle("Mary");
    aName.setLast("Sue");

    assert aName.getFirst().equals("Alice") ;
    assert aName.getMiddle().equals("Mary") ;
    assert aName.getLast().equals("Sue") ;

    System.out.println(aName);
    assert aName.toString().equals("Alice Mary Sue");

    assert aName.lfmi().equals("Sue, Alice M.");

    aName.read();
    System.out.println(aName);

    System.out.println("All tests passed!");
  }
}

class Name
{
  public Name(String first, String middle, String last)
  {
    myFirst = first;
    myMiddle = middle;
    myLast = last;
  }

  public String getFirst() { return myFirst; }

  public String getMiddle() { return myMiddle; }

  public String getLast() { return myLast; }

  public String toString() { return myFirst + ' ' + myMiddle + ' ' + myLast; }

  public void print() { System.out.println( toString() ); }

  public void setFirst(String aFirst) { myFirst = aFirst; }

  public void setMiddle(String aMiddle) { myMiddle = aMiddle; }

  public void setLast(String aLast) { myLast = aLast; }

  public String lfmi() {return myLast + ", " + myFirst + ' ' + myMiddle.charAt(0) + '.'; };

  public void read() {
    Scanner keyboard = new Scanner(System.in);
    myFirst = keyboard.next();
    myMiddle = keyboard.next();
    myLast = keyboard.next();
    keyboard.close();
  };
    
  private String myFirst, myMiddle, myLast;
};]0;zs35@gold02: ~/Desktop/214/projects/08[01;32mzs35@gold02[00m:[01;34m~/Desktop/214/projects/08[00m$ javac -deprecation Nameta  Tester.java
]0;zs35@gold02: ~/Desktop/214/projects/08[01;32mzs35@gold02[00m:[01;34m~/Desktop/214/projects/08[00m$ java NameTester
John Paul Jones
Alice Mary Sue
ZeAi
Sophia
Sun
ZeAi Sophia Sun
All tests passed!
]0;zs35@gold02: ~/Desktop/214/projects/08[01;32mzs35@gold02[00m:[01;34m~/Desktop/214/projects/08[00m$ exit
exit

Script done on 2023-03-13 16:57:08-04:00 [COMMAND_EXIT_CODE="0"]
Script started on 2023-03-13 20:14:00-04:00 [TERM="xterm-256color" TTY="/dev/pts/0" COLUMNS="93" LINES="68"]
]0;zs35@gold04: ~/Desktop/214/projects/08[01;32mzs35@gold04[00m:[01;34m~/Desktop/214/projects/08[00m$ cat name_tester.adb
-- namer.adb "test-drives" the Name type.
-- Begun by: Prof. Adams, CS 214 at Calvin College.
-- Completed by: ZeAi Sun
-- Date: Mar 13, 2023
----------------------------------------------

with Ada.Text_IO; use Ada.Text_IO;

procedure name_tester is

  NAME_SIZE : constant Integer := 8;

  type Name is
    record
      MyFirst : String(1..NAME_SIZE);
      MyMiddle : String(1..NAME_SIZE);
      MyLast : String(1..NAME_SIZE);
    end record;

  aName : Name ;
  i : String(1..NAME_SIZE);

  ----------------------------------------------
  -- Init initializes a Name variable          -
  -- Receive: theName, the Name variable;      -
  --          First, the first name;           -
  --          Middle, the middle name;         -
  --          Last, the last name.             -
  -- Return: theName, its fields set to First, -
  --               Middle, and Last.           -
  ----------------------------------------------

  procedure Init (TheName : out Name; First, Middle, Last : in String) is begin
    TheName.MyFirst := First;
    TheName.MyMiddle := Middle;
    TheName.MyLast := Last;
  end Init;

  ----------------------------------------------
  -- getFirst(Name) retrieves Name.myFirst        -
  -- Receive: theName, a Name.                 -
  -- PRE: theName has been initialized.        -
  -- Return: theName.myFirst.                  -
  ----------------------------------------------

  function getFirst(TheName : in Name) return String is begin
    return TheName.MyFirst;
  end getFirst;

  function getMiddle(TheName : in Name) return String is begin
    return TheName.MyMiddle;
  end getMiddle;  

  function getLast(TheName : in Name) return String is begin
    return TheName.MyLast;
  end getLast;  

  -----------------------------------------------
  -- getFullName(Name) retrieves Name as a String  -
  -- Receive: theName, a Name.                  -
  -- PRE: theName has been initialized.         -
  -- Return: a String representation of theName -
  -----------------------------------------------

  function getFullName(TheName : in Name) return String is begin
    return TheName.MyFirst & ' ' & TheName.MyMiddle & ' ' & TheName.MyLast;
  end getFullName;

  ----------------------------------------------
  -- Put(Name) displays a Name value.          -
  -- PRE: theName has been initialized.        -
  -- Receive: theName, a Name.                 -
  -- Output: theName, to the screen.           -
  ----------------------------------------------

  procedure Put(TheName : in Name) is begin
    Put_Line(getFullName(TheName));
  end Put;

  -----------------------------------------------
  -- setFirst(Name) changes Name.myFirst        -
  -- Receive: theName, a Name. aFirst, a String.-
  -- PRE: theName has been initialized.         -
  -----------------------------------------------

  procedure setFirst(TheName : in out Name; aFirst : in String) is begin
    TheName.MyFirst := aFirst;
  end setFirst;

  procedure setMiddle(TheName : in out Name; aMiddle : in String) is begin
    TheName.MyMiddle := aMiddle;
  end setMiddle;

  procedure setLast(TheName : in out Name; aLast : in String) is begin
    TheName.MyLast := aLast;
  end setLast;

  ----------------------------------------------
  -- lfmi(Name) returns the name in lfmi format-
  -- Receive: theName, a Name.                 -
  -- PRE: theName has been initialized.        -
  -- Return: last + first + middleInitial      -
  ----------------------------------------------

  function lfmi(TheName : in Name) return String is begin
    return TheName.MyLast & ' ' & TheName.MyFirst & ", " & TheName.MyMiddle(0) & '.';
  end lfmi;

  ----------------------------------------------
  -- read(Name) reads value from the keyboard. -
  -- Receive: theName, a Name.                 -
  ----------------------------------------------

  procedure read(TheName : in out Name) is begin
    Get(i);
    TheName.MyFirst := i;
    Get(i);
    TheName.MyMiddle := i;
    Get(i);
    TheName.MyLast := i;
  end read;

begin
    Init(aName, "John    ", "Paul    ", "Jones   ");

    pragma Assert( getFirst(aName) = "John    ", "getFirst() failed");
    pragma Assert( getMiddle(aName) = "Paul    ", "getMiddle() failed");
    pragma Assert( getLast(aName) = "Jones   ", "getLast() failed");
    pragma Assert( getFullName(aName) = "John     Paul     Jones   ",
                  "getFullName() failed");
    Put(aName); New_line;

    setFirst(aName, "Alice   ");
    setMiddle(aName, "Mary    ");
    setLast(aName, "Sue     ");

    pragma Assert( getFirst(aName) = "Alice   ", "setFirst() failed");
    pragma Assert( getMiddle(aName) = "Mary    ", "setMiddle() failed");
    pragma Assert( getLast(aName) = "Sue     ", "setLast() failed");
    pragma Assert( lfmi(aName) = "Sue, Alice M.", "lfmi() failed");
    Put(aName); New_line;

    read(aName);
    Put(aName); New_line;
    Put("All tests passed!"); New_line;

end name_tester;
]0;zs35@gold04: ~/Desktop/214/projects/08[01;32mzs35@gold04[00m:[01;34m~/Desktop/214/projects/08[00m$ gantmane       natmae ke name_tester.adb
gnatmake: "name_tester" up to date.
]0;zs35@gold04: ~/Desktop/214/projects/08[01;32mzs35@gold04[00m:[01;34m~/Desktop/214/projects/08[00m$ ./name_tester
John     Paul     Jones   

Alice    Mary     Sue     

ZeAi    
Sophia  
Sun     
ZeAi     Sophia   Sun     

All tests passed!
]0;zs35@gold04: ~/Desktop/214/projects/08[01;32mzs35@gold04[00m:[01;34m~/Desktop/214/projects/08[00m$ exit
exit

Script done on 2023-03-13 20:14:30-04:00 [COMMAND_EXIT_CODE="0"]
Script started on 2023-03-13 20:49:31-04:00 [TERM="xterm-256color" TTY="/dev/pts/0" COLUMNS="93" LINES="68"]
]0;zs35@gold04: ~/Desktop/214/projects/08/clojure[01;32mzs35@gold04[00m:[01;34m~/Desktop/214/projects/08/clojure[00m$ cd src
]0;zs35@gold04: ~/Desktop/214/projects/08/clojure/src[01;32mzs35@gold04[00m:[01;34m~/Desktop/214/projects/08/clojure/src[00m$ cat nameTester.clj
;;;; nameTester.clj creates and tests a clojure Name type.
;;;;
;;;; Output: results of testing Name functions.
;;;;
;;;; Usage: clojure -m nameTester
;;;;
;;;; Begun by: Dr. Adams, CS 214 at Calvin College.
;;;; Completed by: ZeAi Sun
;;;; Date: Mar 13, 2023
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(ns nameTester)   ; program name

;;; define a Clojure record named Name 
;;; (which compiles to a Java class).

(defrecord Name [firstName middleName lastName])

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;; make-Name constructs a Name from three strings. 
;;; Receive: firstN, middleN and lastN, three strings.
;;; Return: the Name (firstN middleN lastN). 
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(defn make-Name [firstN middleN lastN]
  (->Name firstN middleN lastN)
)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;; getFirst() extracts the first name of a Name object.
;;; Receive: aName, a Name.
;;; Return: the firstName string in aName.
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(defn getFirst [^Name aName]
  (:firstName aName)
)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;; getMiddle() extracts the middle name of a name object.
;;; Receive: aName, a Name. 
;;; Return: the middleName string in aName.
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
 
(defn getMiddle [^Name aName]
  (:middleName aName)
)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;; getLast() extracts the last name of a name object.
;;; Receive: aName, a Name. 
;;; Return: the lastName string in aName.
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
 
(defn getLast [^Name aName]
  (:lastName aName)
)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;; getFullName() returns a full name in F-M-L order. 
;;; Receive: aName, a Name. 
;;; Return: firstName, middleName, lastName,
;;;           separated by spaces. 
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
 
(defn toString [^Name aName]
  (str (getFirst aName)  " " (getMiddle aName) " " (getLast aName))
)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;; printName() displays a name object.
;;; Receive: aName, a Name.
;;; Output: the strings in aName.
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
 
(defn printName [^Name aName]
  (print (toString aName))
)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;; setFirst() changes the first name of a Name object.
;;; Receive: aName, a Name. aFirst, a String.
;;; Return:  the Name after change.
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(defn setFirst [^Name aName aFirst]
  (->Name aFirst (getMiddle aName) (getLast aName))
)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;; setMiddle() changes the middle name of a Name object.
;;; Receive: aName, a Name. aMiddle, a String.
;;; Return:  the Name after change.
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(defn setMiddle [^Name aName aMiddle]
  (->Name (getFirst aName) aMiddle (getLast aName))
)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;; setLast() changes the last name of a Name object.
;;; Receive: aName, a Name. aLast, a String.
;;; Return:  the Name after change.
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(defn setLast [^Name aName aLast]
  (->Name (getFirst aName) (getMiddle aName) aLast)
)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;; lfmi() returns the name of a Name object in lastname + firstname + middleInitial.
;;; Receive: aName, a Name.
;;; Return: a string in lfmi format.
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(defn lfmi [^Name aName]
  (str (getLast aName)  ", " (getFirst aName) " " (subs (getMiddle aName) 0 1) ".")
)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;; readName() reads value from keyboard and stores the value into the Name.
;;; Receive: aName, a Name.
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(defn readName [^Name aName]
  (let [aName (make-Name (read-line) (read-line) (read-line))] aName)
)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;; A simple driver to test our Name functions. 
;;; Output: the result of testing our Name functions.
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(defn -main []
  (let
    [                                          ; 3 ways to construct an object:
      name1 (make-Name "John" "Paul" "Jones")  ; -using our "make-" constructor
      name2 (->Name "Jane" "Penelope" "Jones") ; -invoking constructor directly
                                               ; -mapping field-names to values
      name3 (map->Name {:lastName "Jones" :firstName "Jinx" :middleName "Joy"})
    ]
    ;; ----- SECTION 1 -----
    (println)
    (print name1) (println)
    (assert (= (getFirst name1) "John") "getFirst(1) failed")
    (assert (= (getMiddle name1) "Paul") "getMiddle(1) failed")
    (assert (= (getLast name1) "Jones") "getLast(1) failed")
    (assert (= (toString name1) "John Paul Jones") "toString(1) failed")
    (printName name1) (println)
    ;; ----- SECTION 2 -----
    (println)
    (print name2) (println)
    (assert (= (getFirst name2) "Jane") "getFirst(2) failed")
    (assert (= (getMiddle name2) "Penelope") "getMiddle(2) failed")
    (assert (= (getLast name2) "Jones") "getLast(2) failed")
    (assert (= (toString name2) "Jane Penelope Jones") "toString(2) failed")
    (printName name2) (println)
    ;; ----- SECTION 3 -----
    (println)
    (print name3) (println)
    (assert (= (getFirst name3) "Jinx") "getFirst(3) failed")
    (assert (= (getMiddle name3) "Joy") "getMiddle(3) failed")
    (assert (= (getLast name3) "Jones") "getLast(3) failed")
    (assert (= (toString name3) "Jinx Joy Jones") "toString(3) failed")
    (printName name3) (println)
    ;; ----- SECTION 4 -----
    (println)
    (print (setFirst name1 "Alice")) (println)
    (print (setMiddle name1 "Mary")) (println)
    (print (setLast name1 "Sue")) (println)
    (assert (= (getFirst (setFirst name1 "Alice")) "Alice") "setFirst failed")
    (assert (= (getMiddle (setMiddle name1 "Mary")) "Mary") "setMiddle failed")
    (assert (= (getLast (setLast name1 "Sue")) "Sue") "setLast failed")
    ;; ----- SECTION 5 -----
    (println)
    (assert (= (lfmi name1) "Jones, John P.") "lmfi failed")
    (assert (= (lfmi name2) "Jones, Jane P.") "lmfi failed")
    (assert (= (lfmi name3) "Jones, Jinx J.") "lmfi failed")
    ;; ----- SECTION 6 -----
    (println)
    (print (readName name1))

    (println "\nAll tests passed!\n")
  )
)]0;zs35@gold04: ~/Desktop/214/projects/08/clojure/src[01;32mzs35@gold04[00m:[01;34m~/Desktop/214/projects/08/clojure/src[00m$ cd ..
]0;zs35@gold04: ~/Desktop/214/projects/08/clojure[01;32mzs35@gold04[00m:[01;34m~/Desktop/214/projects/08/clojure[00m$ coure    lojure -m nameTester

#nameTester.Name{:firstName John, :middleName Paul, :lastName Jones}
John Paul Jones

#nameTester.Name{:firstName Jane, :middleName Penelope, :lastName Jones}
Jane Penelope Jones

#nameTester.Name{:firstName Jinx, :middleName Joy, :lastName Jones}
Jinx Joy Jones

#nameTester.Name{:firstName Alice, :middleName Paul, :lastName Jones}
#nameTester.Name{:firstName John, :middleName Mary, :lastName Jones}
#nameTester.Name{:firstName John, :middleName Paul, :lastName Sue}


ZeAi
Sophia
SU un
#nameTester.Name{:firstName ZeAi, :middleName Sophia, :lastName Sun}
All tests passed!

]0;zs35@gold04: ~/Desktop/214/projects/08/clojure[01;32mzs35@gold04[00m:[01;34m~/Desktop/214/projects/08/clojure[00m$ exit
exit

Script done on 2023-03-13 20:49:57-04:00 [COMMAND_EXIT_CODE="0"]
Script started on 2023-03-13 19:54:52-04:00 [TERM="xterm-256color" TTY="/dev/pts/0" COLUMNS="93" LINES="68"]
]0;zs35@gold04: ~/Desktop/214/projects/08[01;32mzs35@gold04[00m:[01;34m~/Desktop/214/projects/08[00m$ cat NameTester.rb
# NameTester.rb tests class Name and its operations
#
# Begun by: Dr. Adams, for CS 214 at Calvin College.
# Completed by: ZeAi Sun
# Date: Mar 13, 2023
####################################################

require 'test/unit/assertions'   # needed for assert
include Test::Unit::Assertions

class Name
   def initialize(first, middle, last)       # initialize the attributes
      @first, @middle, @last = first, middle, last
   end

   def fullName()          # this method returns the full name
      @first + ' ' + @middle + ' ' + @last
   end

   def print()             # this method prints and returns the full name
      puts(fullName())
      fullName()
   end

   def setFirst(aFirst)    # this method changes the first name
      @first = aFirst
   end

   def setMiddle(aMiddle)  # this method changes the middle name
      @middle = aMiddle
   end

   def setLast(aLast)      # this method changes the last name
      @last = aLast
   end

   def lfmi()              # this method return the lastname + firstname + middleInitial.
      @last + ', ' + @first + ' ' + @middle[0] + '.'
   end

   def read()              # this method reads the value from the keyboard.
      puts "\n"
      @first = gets.chomp
      @middle = gets.chomp
      @last = gets.chomp
   end

   attr_reader :first, :middle, :last
end


def testName
   name = Name.new("John", "Paul", "Jones")

   assert name.first == "John", "first failed"
   assert name.middle == "Paul", "middle failed"
   assert name.last == "Jones", "last failed"
   assert name.fullName == "John Paul Jones", "fullName failed"
   assert name.print == "John Paul Jones", "print failed"

   name.setFirst("Alice");
   name.setMiddle("Mary");
   name.setLast("Sue");

   assert name.first == "Alice"
   assert name.middle == "Mary"
   assert name.last == "Sue"

   print name.fullName()
   assert name.fullName == "Alice Mary Sue"

   assert name.lfmi() == "Sue, Alice M."

   name.read();
   print name.fullName() + "\n"
   
   print "All tests passed!\n"
end

testName]0;zs35@gold04: ~/Desktop/214/projects/08[01;32mzs35@gold04[00m:[01;34m~/Desktop/214/projects/08[00m$ ruby NameTester.rb
John Paul Jones
Alice Mary Sue
ZEA  eAi  
Sophia
Sun
ZeAi Sophia Sun
All tests passed!
]0;zs35@gold04: ~/Desktop/214/projects/08[01;32mzs35@gold04[00m:[01;34m~/Desktop/214/projects/08[00m$ exit
exit

Script done on 2023-03-13 19:55:09-04:00 [COMMAND_EXIT_CODE="0"]
