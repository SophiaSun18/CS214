Script started on 2023-02-20 19:37:19-05:00 [TERM="xterm-256color" TTY="/dev/pts/0" COLUMNS="105" LINES="24"]
]0;zs35@gold24: ~/Desktop/214/labs/07[01;32mzs35@gold24[00m:[01;34m~/Desktop/214/labs/07[00m$ cat Average.java
/* Average.java is a driver for method avg().
 *
 * Started by: Prof. Adams, for CS 214 at Calvin College
 *
 * Student Name: ZeAi Sun
 * Date: Feb 20, 2023
 *
 * Precondition: theArray, is an array of double values.
 * Output: the average of the numbers in theArray.
 ***************************************************************/

import java.io.*;

public class Average
{
  public static void main(String[] args) {

      double[] array0 = {};
      double[] array1 = {9.0, 8.0, 7.0, 6.0};

      // output the average of the values in the arrays
      System.out.println("The first average is " + avg(array0));
      System.out.println("The second average is " + avg(array1));
  }

  /* sum() is a method that computes the sum of all the values
   * in an array of doubles.
   * Receive: anArray, an array of doubles.
   * Return: the sum of the values in anArray.
   ************************************************************/

  public static double sum(double[] theArray){
    double total = 0.0;
    for (int i = 0; i < theArray.length; i++){
        total += theArray[i];
    }
    return total;
  }

  /* avg() is a method that computes the average of the values
   * in an array.
   * Receive: anArray, an array of doubles.
   * Return: the average of the values in anArray.
   **************************************************************/
  
  public static double avg(double anArray[])
  {
    if (anArray == null || anArray.length <= 0)
      return 0.0;
    else
      return sum(anArray) / anArray.length;
  }

}

]0;zs35@gold24: ~/Desktop/214/labs/07[01;32mzs35@gold24[00m:[01;34m~/Desktop/214/labs/07[00m$ javac -deprecation Average.java
]0;zs35@gold24: ~/Desktop/214/labs/07[01;32mzs35@gold24[00m:[01;34m~/Desktop/214/labs/07[00m$ java Average
The first average is 0.0
The second average is 7.5
]0;zs35@gold24: ~/Desktop/214/labs/07[01;32mzs35@gold24[00m:[01;34m~/Desktop/214/labs/07[00m$ exit
exit

Script done on 2023-02-20 19:37:35-05:00 [COMMAND_EXIT_CODE="0"]
Script started on 2023-02-20 20:06:35-05:00 [TERM="xterm-256color" TTY="/dev/pts/0" COLUMNS="105" LINES="24"]
]0;zs35@gold24: ~/Desktop/214/labs/07[01;32mzs35@gold24[00m:[01;34m~/Desktop/214/labs/07[00m$ cat average/a  .adb
-- average.adb "test-drives" function Average.
-- Precondition: theArray is an array of numbers.
-- Output: the average of the numbers.
--
-- Begun by: Dr. Adams, CS 214 at Calvin College.
-- Completed by: ZeAi Sun
-- Date: Feb 20, 2023
-----------------------------------------------

with Ada.Text_IO; use Ada.Text_IO;             -- Put(String)
with Ada.Float_Text_IO; use Ada.Float_Text_IO; -- Put(Float)

procedure average is

   type Vector is array ( Positive range <>) of Float;

   array0 : Vector := (0.0, 0.0);
   array1 : Vector := (9.0, 8.0, 7.0, 6.0);

----------------------------------------------
-- sum() sums the values in an array           -
-- Receive: anArray, an array of numbers     -
-- Return: the sum of the values in anArray. -
----------------------------------------------

function sum(A: Vector) return Float is 
    Total : Float := 0.0; 
  begin 
    -- for I in A'Range 
    for I in A'First..A'Last
    loop 
      Total := Total + A(I); 
    end loop; 
    return Total; 
  end sum;
----------------------------------------------
-- average() computes the average value of an array  -
-- Receive: anArray, an array of numbers     -
-- Return: the average value of anArray. -
----------------------------------------------

function average(anArray: in Vector) return Float is
begin
   if anArray'Length <= 0 then
      return 0.0;
   else
      return sum(anArray) / Float(anArray'Length);
   end if;
end average;

begin
   Put(" average 0 is ");
   Put( average(array0) );
   New_line;
   Put(" average 1 is ");
   Put( average(array1) );
   New_line;
end average;]0;zs35@gold24: ~/Desktop/214/labs/07[01;32mzs35@gold24[00m:[01;34m~/Desktop/214/labs/07[00m$ gnatmake average.adb
gnatmake: "average" up to date.
]0;zs35@gold24: ~/Desktop/214/labs/07[01;32mzs35@gold24[00m:[01;34m~/Desktop/214/labs/07[00m$ ./average
 average 0 is  0.00000E+00
 average 1 is  7.50000E+00
]0;zs35@gold24: ~/Desktop/214/labs/07[01;32mzs35@gold24[00m:[01;34m~/Desktop/214/labs/07[00m$ exit
exit

Script done on 2023-02-20 20:06:48-05:00 [COMMAND_EXIT_CODE="0"]
Script started on Mon Feb 20 23:20:47 2023
[1m[7m%[27m[1m[0m                                                                           ]7;file://ZeAideMacBook-Air.local/Users/sza/desktop/OneDrive%20-%20Calvin%20University/cs214/labs/07/clojure[0m[27m[24m[Jsza@ZeAideMacBook-Air clojure % [K[?2004hccd c src[?2004l
[1m[7m%[27m[1m[0m                                                                           ]7;file://ZeAideMacBook-Air.local/Users/sza/desktop/OneDrive%20-%20Calvin%20University/cs214/labs/07/clojure/src[0m[27m[24m[Jsza@ZeAideMacBook-Air src % [K[?2004hccat ae verage.clj[?2004l
;; average.clj "test-drives" function average().
;;
;; Output: the average of a sequence of numbers.
;;
;; Usage: clojure -m average
;;
;; Begun by: Dr. Adams, CS 214 at Calvin College.
;; Completed by: ZeAi Sun
;; Date: Feb 20, 2023
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(ns average)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; sum() sums the values in a vector.       
;; Receive: aVec, a vector of numbers.
;; Return: the sum of the values in aVec.
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;; harder (recursive) solution
(defn sum [aVec]
  (if (vector? aVec)      ; if aVec is a vector
    (if (empty? aVec)     ;   if aVec is empty:
      0.0                 ;     return 0
      (+ (peek aVec)      ;   else return the last value
         (sum (pop aVec)) ;    + sum(all but the last value)
      )
    )
  )
)

;; easier (non-recursive) solution
(defn sum2 [aVec]
  (if (vector? aVec)      ; if aVec is a vector:
    (if (empty? aVec)     ;   if aVec is empty:
      0.0                 ;    return 0
      (reduce + aVec)     ;   else reduce aVec using +
    )
  )
)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; average() computes the average of a vector of numbers.
;; Receive: aVec, a vector of numbers. 
;; Return: the average of the numbers in aVec.
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   
(defn average [aVec]
  (if (vector? aVec)      ; if aVec is a vector:
    (if (empty? aVec)     ;   if aVec is empty:
      0.0                 ;    return 0
      (/ (sum aVec)       ;   else return the sum of all values
         (count aVec))    ;       / number of values
    )
  )
)      

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; main function to test functions sum() and average()
;; Output: the sum and average of some test vectors.
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(defn -main []
  (let
    [ emptyVec []
      testVec  [9.0 8.0 7.0 6.0]
    ]

    (print "\nThe empty vec: " emptyVec) 
    (print "\nThe test  vec: " testVec) 
    (println "\n")

    ;; Test sum()...
    (printf "\nThe first sum is %.3f\n" (sum emptyVec))
    (printf "The second sum is %.3f\n" (sum testVec))

    ;; Test average()...
    (printf "\nThe first average is %.3f\n" (average emptyVec))
    (printf "The second average is %.3f\n" (average testVec))
    (println "\n")

    ;; Test sum2()...
    (printf "\nThe first sum2 is %.3f\n" (sum2 emptyVec))
    (printf "The second sum2 is %.3f\n" (sum2 testVec))
    (println "\n")
  )
)

[1m[7m%[27m[1m[0m                                                                           ]7;file://ZeAideMacBook-Air.local/Users/sza/desktop/OneDrive%20-%20Calvin%20University/cs214/labs/07/clojure/src[0m[27m[24m[Jsza@ZeAideMacBook-Air src % [K[?2004hccd..   ..[?2004l
[1m[7m%[27m[1m[0m                                                                           ]7;file://ZeAideMacBook-Air.local/Users/sza/desktop/OneDrive%20-%20Calvin%20University/cs214/labs/07/clojure[0m[27m[24m[Jsza@ZeAideMacBook-Air clojure % [K[?2004hcclojure -m avergae  a  age[?2004l
WARNING: Implicit use of clojure.main with options is deprecated, use -M

The empty vec:  []
The test  vec:  [9.0 8.0 7.0 6.0]


The first sum is 0.000
The second sum is 30.000

The first average is 0.000
The second average is 7.500



The first sum2 is 0.000
The second sum2 is 30.000


[1m[7m%[27m[1m[0m                                                                           ]7;file://ZeAideMacBook-Air.local/Users/sza/desktop/OneDrive%20-%20Calvin%20University/cs214/labs/07/clojure[0m[27m[24m[Jsza@ZeAideMacBook-Air clojure % [K[?2004heexit[?2004l

Saving session...
...copying shared history...
...saving history...truncating history files...
...completed.
Deleting expired sessions...none found.

Script done on Mon Feb 20 23:21:14 2023
Script started on 2023-02-20 19:51:07-05:00 [TERM="xterm-256color" TTY="/dev/pts/0" COLUMNS="105" LINES="24"]
]0;zs35@gold24: ~/Desktop/214/labs/07[01;32mzs35@gold24[00m:[01;34m~/Desktop/214/labs/07[00m$ cat average.rb
# average.rb averages the values of an array of doubles.
# Precondition: theArray is an array of numbers
# Output: the average of the values in theArray
#
# Begun by: Dr. Adams, for CS 214 at Calvin College.
# Completed by: ZeAi Sun
# Date: Feb 20, 2023
########################################################

###############################################
# sum() sums the values in an array
# Receive: anArray, an array of numbers
# Return: the sum of the values in anArray.
################################################

def sum(array)
   total = 0.0;
   array.each do |n|
      total += n;
   end
   return total;
end

###############################################
# average() computes the average value of an array
# Receive: anArray, an array of numbers
# Return: the average value of anArray.
################################################

def average(array)
   if array.size <= 0
      return 0.0;
   else
      return sum(array) / array.size;
   end
end

def main
   array0 = [];
   array1 = [9.0, 8.0, 7.0, 6.0];

   puts "sum 0 is: #{ sum(array0) }\n"
   puts "sum 1 is: #{ sum(array1) }\n"

   puts "average 0 is: #{ average(array0) }\n"
   puts "average 1 is: #{ average(array1) }\n"
end

main

]0;zs35@gold24: ~/Desktop/214/labs/07[01;32mzs35@gold24[00m:[01;34m~/Desktop/214/labs/07[00m$ ruby average.rb
sum 0 is: 0.0
sum 1 is: 30.0
average 0 is: 0.0
average 1 is: 7.5
]0;zs35@gold24: ~/Desktop/214/labs/07[01;32mzs35@gold24[00m:[01;34m~/Desktop/214/labs/07[00m$ exit
exit

Script done on 2023-02-20 19:51:18-05:00 [COMMAND_EXIT_CODE="0"]
