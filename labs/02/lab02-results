Script started on 2023-01-16 20:54:48-05:00 [TERM="xterm-256color" TTY="/dev/pts/0" COLUMNS="75" LINES="66"]
]0;zs35@gold07: ~/Desktop/214/labs/02[01;32mzs35@gold07[00m:[01;34m~/Desktop/214/labs/02[00m$ cat example6.lex
%{
#include <stdio.h>
#include <stdlib.h>           /* atoi() */
#include <string.h>           /* strcmp() */
#include "example6.tab.h"
%}
%%
[0-9]+                  yylval = atoi(yytext); return NUMBER;
heat                    return TOKHEAT;
on|off                  yylval = !strcmp(yytext,"on"); return STATE;
set                     return TOKSET;
temperature             return TOKTEMPERATURE;
humidity		return TOKHUMIDITY;
\n                      /* ignore end of line */;
[ \t]+                  /* ignore whitespace */;
%%
]0;zs35@gold07: ~/Desktop/214/labs/02[01;32mzs35@gold07[00m:[01;34m~/Desktop/214/labs/02[00m$ cat example6.y
%{
#include <stdio.h>
#include <string.h>

/* declarations */
int yylex (void);
void yyerror (char const *);
int yyparse(void);

/* definitions */ 
void yyerror(const char *str) {
        fprintf(stderr,"error: %s\n",str);
}
 
int yywrap() {
        return 1;
} 
 
int main() {
        yyparse();
} 

%}

%token NUMBER TOKHEAT STATE TOKSET TOKTEMPERATURE TOKHUMIDITY
%%

commands: /* empty */
        | commands command
        ;

command:
        heat_switch
        | temperature_set
	| humidity_set
        ;

heat_switch:
        TOKHEAT STATE
        {
                if ($2) {  /* if STATE == 1 */
                        printf("\tHeat turned on\n");
                } else {
                        printf("\tHeat turned off\n");
                }
        }
        ;

temperature_set: 
        TOKSET TOKTEMPERATURE NUMBER
        {
                printf("\tTemperature set to %d\n",$3);
        }
        ;

humidity_set: 
        TOKSET TOKHUMIDITY NUMBER
        {
                printf("\tHumidity set to %d\n",$3);
        }
        ;
]0;zs35@gold07: ~/Desktop/214/labs/02[01;32mzs35@gold07[00m:[01;34m~/Desktop/214/labs/02[00m$ make
make: 'example6' is up to date.
]0;zs35@gold07: ~/Desktop/214/labs/02[01;32mzs35@gold07[00m:[01;34m~/Desktop/214/labs/02[00m$ make clean
rm -f lex.yy.c *.tab.h *.tab.c example6
]0;zs35@gold07: ~/Desktop/214/labs/02[01;32mzs35@gold07[00m:[01;34m~/Desktop/214/labs/02[00m$ make
flex example6.lex
bison -d example6.y
gcc lex.yy.c example6.tab.c -o example6 -lfl
]0;zs35@gold07: ~/Desktop/214/labs/02[01;32mzs35@gold07[00m:[01;34m~/Desktop/214/labs/02[00m$ ./example6
heat on
	Heat turned on
heat off
	Heat turned off
set temperature 22
	Temperature set to 22
set humidity 33
	Humidity set to 33
]0;zs35@gold07: ~/Desktop/214/labs/02[01;32mzs35@gold07[00m:[01;34m~/Desktop/214/labs/02[00m$ exit
exit

Script done on 2023-01-16 20:56:35-05:00 [COMMAND_EXIT_CODE="0"]
/**************************
/* Student Name: ZeAi Sun
/* Date: Jan 16, 2023
/**************************

/*********************************************

Flex Example 1:
* In line 726-743, there is a switch statement that has 3 cases:
* For case 1, the program responds to "start" and prints "start command received";
* For case 2, the program responds to "stop" and prints "stop command received";
* For case 3, the program simply echos the input if the input is neither "start" nor "stop".

/*********************************************

Flex Example 2:
* Input: 12, Output: NUMBER
* Input: sjsjs, Output: WORD
* Input: jdj2, Output: WORD
* Input: 2jdj, Output: NUMBER WORD
* Input: 2_f, Output: NUMBER _WORD
  * When an underscore is included, it is separated from other symbols and treated as another category.

The extended version:
%{
#include <stdio.h>
%}

%%
[0123456789]+           printf("NUMBER\n");
[a-zA-Z][a-zA-Z0-9]*    printf("WORD\n");
[a-zA-Z_][a-zA-Z0-9_]*  printf("WORD\n");
%%

Test:
* Input: 2, Output: NUMBER
* Input: s, Output: WORD
* Input: s2, Output: WORD
* Input: f_2, Output: WORD
* Input: D33_D, Output: WORD

/*********************************************

Flex Example 3:

KEYWORD: class
IDENTIFIER: StudentInfo
PUNCTUATION: {
KEYWORD: public
PUNCTUATION: :
IDENTIFIER: StudentInfo
PUNCTUATION: (
PUNCTUATION: )
PUNCTUATION: {
IDENTIFIER: myGPA
OPERATOR: =
DOUBLE: 0.0 (0)
PUNCTUATION: ;
IDENTIFIER: myHours
OPERATOR: =
INTEGER: 0 (0)
PUNCTUATION: ;
PUNCTUATION: }
IDENTIFIER: StudentInfo
PUNCTUATION: (
KEYWORD: double
IDENTIFIER: gpa
PUNCTUATION: ,
KEYWORD: int
IDENTIFIER: hours
PUNCTUATION: )
PUNCTUATION: {
IDENTIFIER: myGPA
OPERATOR: =
IDENTIFIER: gpa
PUNCTUATION: ;
IDENTIFIER: myHours
OPERATOR: =
IDENTIFIER: hours
PUNCTUATION: ;
PUNCTUATION: }
KEYWORD: private
PUNCTUATION: :
KEYWORD: double
IDENTIFIER: myGPA
PUNCTUATION: ;
KEYWORD: int
IDENTIFIER: myHours
PUNCTUATION: ;
PUNCTUATION: }
PUNCTUATION: ;

/*********************************************

Bison: Example 4
* A terminal doesn't need to call other commands: it will give an eventual output.
* A non-terminal needs to keep calling other commands to keep working.

/*********************************************

Bison: Example 5
* Input: heat on, Output: Heat turned on
* Input: heat off, Output: Heat turned off
* Input: set temperature 22, Output: Temperature set to 22
* Input: set temperature 57, Output: Temperature set to 57

/*********************************************

Exercise: Example 6










